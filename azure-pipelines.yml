trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  variables:
  - group: NOTIFY_VAR
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: git fetch --unshallow
    - task: SonarCloudPrepare@1
      displayName: 'Prepare Sonar Cloud'
      inputs:
        SonarCloud: 'sonar-cloud'
        organization: 'jonatancon1'
        scannerMode: 'Other'

    - task: Gradle@3
      displayName: 'Build gradle proyect'
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        codeCoverageClassFilesDirectories: 'build/classes/main/'
        codeCoverageFailIfEmpty: true
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: true
        sqGradlePluginVersionChoice: 'build'
        spotBugsAnalysis: false
    - task: PublishCodeCoverageResults@1
      displayName: 'publishCodeCoverage'
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(Build.SourcesDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
        reportDirectory: '$(Build.SourcesDirectory)/build/reports/jacoco/test/html'
    
    - task: SonarQubePublish@5
      displayName: 'Update Coverage In SonarCloud'
      inputs:
        pollingTimeoutSec: '300'
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        repository: 'java-app'
        command: 'build'
        Dockerfile: '**/dockerfile'

    - task: ECRPushImage@1
      displayName: 'Push Docker Image to ECR'
      inputs:
        awsCredentials: 'container-resgister'
        regionName: 'us-east-1'
        imageSource: 'imageid'
        sourceImageId: 'java-app:$(Build.BuildId)'
        repositoryName: 'application-app'
        forceDockerNamingConventions: true
        logRequest: true
        logResponse: true

    #- task: BeanstalkDeployApplication@1
     # inputs:
     #   awsCredentials: 'container-resgister'
     #   regionName: 'us-east-1'
     #   applicationName: 'Devops-Application'
     #   environmentName: 'Devops-Application-env'
     #   applicationType: 's3'
     #   deploymentBundleBucket: 'docker-compose-dev'
     #   deploymentBundleKey: 'docker-compose.yml'
     #   versionLabel: 'V1.$(Build.BuildId)'
     #   logRequest: true
     #   logResponse: true
    - template: azure-pipelines/notify.yml

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: git fetch --unshallow
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonar-cloud'
        organization: 'jonatancon1'
        scannerMode: 'Other'
    - task: Gradle@3
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        codeCoverageClassFilesDirectories: 'build/classes/main/'
        codeCoverageFailIfEmpty: true
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: true
        sqGradlePluginVersionChoice: 'build'
        spotBugsAnalysis: false
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(Build.SourcesDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
        reportDirectory: '$(Build.SourcesDirectory)/build/reports/jacoco/test/html'
    
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
    - task: Docker@2
      inputs:
        repository: 'java-app'
        command: 'build'
        Dockerfile: '**/dockerfile'
    - task: ECRPushImage@1
      inputs:
        awsCredentials: 'container-resgister'
        regionName: 'us-east-1'
        imageSource: 'imageid'
        sourceImageId: 'java-app:$(Build.BuildId)'
        repositoryName: 'application-app'
        pushTag: '$(Build.BuildId)'
        forceDockerNamingConventions: true
        logRequest: true
        logResponse: true
    - bash: |
        echo "##vso[task.setvariable variable=hash;]$(git rev-parse --short HEAD 2> /dev/null)"
        echo "##vso[task.setvariable variable=hasfull;]$(git rev-parse HEAD 2> /dev/null)"
        echo "##vso[task.setvariable variable=currentBranch;]$(Build.SourceBranchName)"
        echo "##vso[task.setvariable variable=buildStatus;]$(Agent.JobStatus)"
        echo "##vso[task.setvariable variable=buildId;]$(Build.BuildId)"
        echo "##vso[task.setvariable variable=organizationName;]$(System.TeamFoundationCollectionUri)"
        echo "##vso[task.setvariable variable=projectName;]$(System.TeamProject)"
        echo "##vso[task.setvariable variable=authorCommit;]$(git log -1 --pretty=format:'%an' 2> /dev/null)"
        echo "##vso[task.setvariable variable=authorCommitEmail;]$(git log -1 --pretty=format:'%ae' 2> /dev/null)"
        echo "##vso[task.setvariable variable=commitReference;]$(git show -s --format='%h %s')"
        echo "##vso[task.setvariable variable=jobName;]$(Agent.JobName)"
        echo "##vso[task.setvariable variable=webHookUrl;]$(WEBHOOKURL)"
        echo "##vso[task.setvariable variable=repositoryName;]$(Build.Repository.Name)"
      displayName: 'Set variables for notify.sh'
      condition: always()
    - task: Bash@3
      displayName: 'Send Google Chat Alert'
      condition: always()
      inputs:
        targetType: filePath
        filePath: './azure-pipelines/scripts/notify.sh'
        arguments: '"$(hash)" "$(hasfull)" "$(currentBranch)" "$(buildStatus)" "$(buildId)" "$(organizationName)" "$(projectName)" "$(authorCommit)" "$(authorCommitEmail)" "$(commitReference)" "$(jobName)" "$(webHookUrl)" "$(repositoryName)"'
    
    
    
    

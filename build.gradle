plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.13'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id "org.sonarqube" version '3.5.0.2730'
	id 'application'
}

group = 'com.prama.devops'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.projectlombok:lombok:1.18.22'
    runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testImplementation "org.mockito:mockito-core:3.+"
}

application {
	mainClass = 'org.gradle.MyMain'
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run

	jacoco {
		destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
		classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile

		enabled = true
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = "<auto-generated value>"
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}

}

sonarqube {
	properties {
		property "sonar.sources", "src/main"
		property "sonar.tests", "src/test"
		property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.groovy.jacoco.reportPath", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.jacoco.reportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.junit.reportsPaths", "$buildDir/test-results/"
	}

}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = true
		csv.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, includes: ['**/domain/**'])
		}))
	}
}

jacoco {
	applyTo run
	toolVersion = "0.8.9"
	reportsDirectory = layout.buildDirectory.dir("$buildDir/reports/jacoco")
}

tasks.register('applicationCodeCoverageReport', JacocoReport) {
	executionData run
	sourceSets sourceSets.main
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.5
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
